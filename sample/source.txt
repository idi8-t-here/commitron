use std::fs::File;
use rand::Rng;
use std::str::FromStr;
use std::{
    io,
    process::{Command, Stdio},
};

fn main() {
    let daily_commits = daily_commit_amount_randomizer();
    let random_increments = commit_date_randomizer();
    let (day, month) = user_inputs();
    function_that_does_the_job(daily_commits, random_increments, day, month);
}

fn daily_commit_amount_randomizer() -> i32 {
    let daily_commits = rand::thread_rng().gen_range(1..=4);
    println!("{}", daily_commits);
    daily_commits
}

fn commit_date_randomizer() -> i32 {
    let random_increments = rand::thread_rng().gen_range(1..=6);
    random_increments
}

fn function_that_does_the_job(daily_commits: i32, random_increments: i32, _day: String, _month: String) {
    loop {
        for _ in 0..daily_commits {
            let output = Command::new("git")
                .arg("push")
                .arg("origin")
                .arg("main")
                .stdout(Stdio::inherit())
                .stderr(Stdio::inherit())
                .output()
                .expect("Failed to execute git push command");
            println!("{}", String::from_utf8_lossy(&output.stdout));
            if !output.status.success() {
                eprintln!("Error executing command: {:?}", output);
            }
        }
        //here will alter the random day and time 
        let _random_hour = rand::thread_rng().gen_range(1..=24);
        let _random_second = rand::thread_rng().gen_range(10..=59);
        println!("{}", random_increments);
        break;
    }
}
fn user_inputs() -> (String, String) {
    enum Date {
        Mon,
        Tue,
        Wed,
        Thu,
        Fri,
        Sat,
        Sun,
    }

    enum Month {
        Jan,
        Feb,
        Mar,
        Apr,
        May,
        Jun,
        Jul,
        Aug,
        Sep,
        Oct,
        Nov,
        Dec,
    }

    impl FromStr for Date {
        type Err = ();

        fn from_str(input: &str) -> Result<Date, Self::Err> {
            match input {
                "Mon" => Ok(Date::Mon),
                "Tue" => Ok(Date::Tue),
                "Wed" => Ok(Date::Wed),
                "Thu" => Ok(Date::Thu),
                "Fri" => Ok(Date::Fri),
                "Sat" => Ok(Date::Sat),
                "Sun" => Ok(Date::Sun),
                _ => Err(()),
            }
        }
    }

    impl FromStr for Month {
        type Err = ();

        fn from_str(input: &str) -> Result<Month, Self::Err> {
            match input {
                "Jan" => Ok(Month::Jan),
                "Feb" => Ok(Month::Feb),
                "Mar" => Ok(Month::Mar),
                "Apr" => Ok(Month::Apr),
                "May" => Ok(Month::May),
                "Jun" => Ok(Month::Jun),
                "Jul" => Ok(Month::Jul),
                "Aug" => Ok(Month::Aug),
                "Sep" => Ok(Month::Sep),
                "Oct" => Ok(Month::Oct),
                "Nov" => Ok(Month::Nov),
                "Dec" => Ok(Month::Dec),
                _ => Err(()),
            }
        }
    }

    println!("Enter a day where you want the commit to start from [Mon, Tue, Wed...etc] in this exact format");
    let mut day = String::new();
    io::stdin()
        .read_line(&mut day)
        .expect("Failed to read line for day");
    let day = day.trim().to_string();

    println!("Enter a month where you want the commit to start from [Jan, Feb, Mar...etc] in this exact format");
    let mut month = String::new();
    io::stdin()
        .read_line(&mut month)
        .expect("Failed to read line for month");
    let month = month.trim().to_string();

    (day, month)
}
